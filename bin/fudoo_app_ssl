#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fudoo:server');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.API_PORT_SSL || '3000');
app.set('port', port);

/**
 * Create https server.
 */


var server = https.createServer({
    key: fs.readFileSync('/var/www/html/driver_app/fudoo.key', 'utf8'),
    cert: fs.readFileSync('/var/www/html/driver_app/fudoossl.crt', 'utf8'),
     requestCert: false,
    rejectUnauthorized: false
},app); 
/**
 * Listen on provided port, on all network interfaces.
 */
 var ios = require('socket.io')(server);
 global.io = ios
 require("../socket/socket")(ios);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if(isNaN(port)) {
    // named pipe
    return val;
  }

  if(port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for https server "error" event.
 */

function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for https server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
